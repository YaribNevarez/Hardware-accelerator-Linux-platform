/*
 * MAX1163.c
 *
 *  Created on: Dec 3, 2017
 *      Author: root
 */


///////////////////////////////////////////////////////////////////////////////
#include <xparameters.h>
#include "MAX1163.h"
#include "espi_hw.h"
///////////////////////////////////////////////////////////////////////////////

typedef enum
{
    CONVERSION  = 0x80,
    SETUP       = 0x40,
    AVERAGING   = 0x20,
    RESET       = 0x10
} MAX116XX_Registers;

typedef enum
{
    SCAN_0TON   = 0x00,
    SCAN_NTOH   = 0x02,
    SCAN_N      = 0x04,
    NO_SCAN     = 0x06
} MAX116XX_Scannning;

typedef enum
{
    NO_AVG      = 0x00,
    AVG_4       = 0x10,
    AVG_8       = 0x14,
    AVG_16      = 0x18,
    AVG_32      = 0x1C
} MAX116XX_Avgerage;

typedef enum
{
    CLK_INTERNAL    = 0x00,
    CLK_INTERNAL_1  = 0x10,
    CLK_INTERNAL_2  = 0x20,
    CLK_EXTERNAL    = 0x30
} MAX116XX_CLKselection;

typedef enum
{
    REF_INTERNAL_DELAY  = 0x00,
    REF_EXTERNAL        = 0x04,
    REF_INTERNAL_ON     = 0x08,
} MAX116XX_Reference;

///////////////////////////////////////////////////////////////////////////////

static void spi_set_baud_rate_divider(u8 devider)
{
    while (!GET_SPI_TRANSMISSION_DONE);
    SET_SPI_BAUD_RATE_DIVIDER(devider);
}

static void spi_set_clock_phase(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
    SET_SPI_CLOCK_PHASE(val);
}

static void spi_set_clock_polarity(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_CLOCK_POLARITY(val);
}

static void spi_set_data_length(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_DATA_LENGTH(val);
}

static void spi_set_cs_force(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_CS_FORCE(val);
}

static void spi_set_settle_time(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_SETTLE_TIME(val);
}

// static u8 spi_get_transmission_done(void)
// {
//     u32 reg = inport(SPI_CONTROL_REGISTER_INDEX);
//     return REGISTER_GET(reg, SPI_TRANSMISSION_DONE_MASK, SPI_TRANSMISSION_DONE_SHIFT);
// }

static void spi_set_slave_select(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
    SET_SPI_SLAVE_SELECT(val);
}

static u32 spi_receive_data(void)
{
	while (!GET_SPI_TRANSMISSION_DONE);
    return SPI_DATA;
}

static u32 spi_send_data(u32 data)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SPI_DATA = data;
    return spi_receive_data();
}
///////////////////////////////////////////////////////////////////////////////
void MAX1163_initialize(void)
{
    spi_set_baud_rate_divider(0x10); // SPI_CLK(f) = 50000000 / 0x10
    spi_set_clock_phase(0);
    spi_set_clock_polarity(0);

    spi_set_cs_force(0);
    spi_set_settle_time(0);
    spi_set_slave_select(0);

    spi_set_data_length(SPI_DATA_LENGTH_8_BITS);

    spi_send_data(RESET);
    spi_send_data(AVERAGING | NO_AVG);
    spi_send_data(SETUP | CLK_EXTERNAL | REF_INTERNAL_ON);

    spi_set_data_length(SPI_DATA_LENGTH_24_BITS);
}

u32 MAX1163_read(u8 channel)
{
    channel <<= 3;
    return spi_send_data( ( CONVERSION | channel | NO_SCAN ) << 16 );
}
///////////////////////////////////////////////////////////////////////////////
