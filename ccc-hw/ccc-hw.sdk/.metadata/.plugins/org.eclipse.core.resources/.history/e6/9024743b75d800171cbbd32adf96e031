/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <xil_printf.h>
#include "platform.h"
#include <xil_types.h>

///////////////////////////////////////////////////////////////////////////////
#include "espi_hw.h"
///////////////////////////////////////////////////////////////////////////////

typedef enum
{
    CONVERSION  = 0x80,
    SETUP       = 0x40,
    AVERAGING   = 0x20,
    RESET       = 0x10
} MAX116XX_Registers;

typedef enum
{
    SCAN_0TON   = 0x00,
    SCAN_NTOH   = 0x02,
    SCAN_N      = 0x04,
    NO_SCAN     = 0x06
} MAX116XX_Scannning;

typedef enum
{
    NO_AVG      = 0x00,
    AVG_4       = 0x10,
    AVG_8       = 0x14,
    AVG_16      = 0x18,
    AVG_32      = 0x1C
} MAX116XX_Avgerage;

typedef enum
{
    CLK_INTERNAL    = 0x00,
    CLK_INTERNAL_1  = 0x10,
    CLK_INTERNAL_2  = 0x20,
    CLK_EXTERNAL    = 0x30
} MAX116XX_CLKselection;

typedef enum
{
    REF_INTERNAL_DELAY  = 0x00,
    REF_EXTERNAL        = 0x04,
    REF_INTERNAL_ON     = 0x08,
} MAX116XX_Reference;

///////////////////////////////////////////////////////////////////////////////

static void spi_set_baud_rate_divider(u8 devider)
{
    while (!GET_SPI_TRANSMISSION_DONE);
    SET_SPI_BAUD_RATE_DIVIDER(devider);
}

static void spi_set_clock_phase(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
    SET_SPI_CLOCK_PHASE(val);
}

static void spi_set_clock_polarity(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_CLOCK_POLARITY(val);
}

static void spi_set_data_length(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_DATA_LENGTH(val);
}

static void spi_set_cs_force(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_CS_FORCE(val);
}

static void spi_set_settle_time(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SET_SPI_SETTLE_TIME(val);
}

// static u8 spi_get_transmission_done(void)
// {
//     u32 reg = inport(SPI_CONTROL_REGISTER_INDEX);
//     return REGISTER_GET(reg, SPI_TRANSMISSION_DONE_MASK, SPI_TRANSMISSION_DONE_SHIFT);
// }

static void spi_set_slave_select(u8 val)
{
	while (!GET_SPI_TRANSMISSION_DONE);
    SET_SPI_SLAVE_SELECT(val);
}

static u32 spi_receive_data(void)
{
	while (!GET_SPI_TRANSMISSION_DONE);
    return SPI_DATA;
}

static u32 spi_send_data(u32 data)
{
	while (!GET_SPI_TRANSMISSION_DONE);
	SPI_DATA = data;
    return spi_receive_data();
}
///////////////////////////////////////////////////////////////////////////////
void spi_initialize(void)
{
    spi_set_baud_rate_divider(0x10); // SPI_CLK(f) = 50000000 / 0x10
    spi_set_clock_phase(0);
    spi_set_clock_polarity(0);

    spi_set_cs_force(0);
    spi_set_settle_time(0);
    spi_set_slave_select(0);

    spi_set_data_length(SPI_DATA_LENGTH_8_BITS);

    spi_send_data(RESET);
    spi_send_data(AVERAGING | NO_AVG);
    spi_send_data(SETUP | CLK_EXTERNAL | REF_INTERNAL_ON);

    spi_set_data_length(SPI_DATA_LENGTH_24_BITS);
}

u32 adc_read(u8 channel)
{
    channel <<= 3;
    return spi_send_data( ( CONVERSION | channel | NO_SCAN ) << 16 );
}
///////////////////////////////////////////////////////////////////////////////


void test_adc(int channel)
{
	int sample = 0;
	while (1)
	{
		xil_printf("ADC#%d[%d] = 0x%X\n\r", channel, sample++, adc_read(channel));
	}
}

int main()
{
	int channel;
    init_platform();
    spi_initialize();

    xil_printf("Bare metal ADC test\n\r");
    xil_printf("ADC Channel:\n\r");

    channel = inbyte();

    if ('0' <= channel && channel <= '9')
    {
    	channel -= '0';
    	test_adc(channel);
    }
    xil_printf("Invalid channel\n\r");

    cleanup_platform();
    return 0;
}
